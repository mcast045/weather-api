{"version":3,"sources":["components/SearchBox/SearchBox.js","components/UnitComponent/UnitComponent.js","components/Navbar/Navbar.js","utils/utils.js","components/TodayComponent/TodayComponent.js","components/ListComponent/ListComponent.js","components/GraphComponent/GraphComponent.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","_ref","searchSubmit","_useState","useState","_useState2","Object","slicedToArray","query","setQuery","handleSearch","e","preventDefault","console","log","react_default","a","createElement","className","onSubmit","type","value","name","id","placeholder","onChange","target","onClick","UnitComponent","unit","onUnitChange","changeUnit","newUnit","textContent","concat","Navbar","props","components_SearchBox_SearchBox","data","city","components_UnitComponent_UnitComponent","blue","yellow","gray","getIconClassName","weatherId","hasWeatherId","idArray","indexOf","TodayComponent","_props$data","day","date","description","mainTemperature","minTemperature","maxTemperature","pressure","humidity","windSpeed","iconClass","windSpeedUnit","SingleListItem","ListComponent","items","map","singleDayData","ListComponent_SingleListItem","key","GraphComponent","build","color","style","fill","App","setUnit","_useState3","_useState4","queryString","setQueryString","_useState5","_useState6","latLng","setLatLng","_useState7","_useState8","navbarData","setNavbarData","_useState9","_useState10","todayComponentData","setTodayComponentData","_useState11","_useState12","listComponentData","setListComponentData","_useState13","_useState14","graphComponentData","setGraphComponentData","useEffect","geolocation","navigator","getCurrentPosition","position","coords","latitude","longitude","hasLatLng","length","fetchWeatherForecast","then","forecastData","extractDataForNavbar","extractDataForTodayComponent","_extractDataForListAn","extractDataForListAndGraphComponent","catch","error","asyncToGenerator","regenerator_default","mark","_callee","queryParams","unitType","url","result","wrap","_context","prev","next","process","axios","get","sent","abrupt","stop","_x","apply","this","arguments","country","todayForecast","list","time","Date","dt","getDay","getMonth","getDate","getFullYear","weather","hours","getHours","temp","night","Math","round","min","max","speed","forEach","forecast","item","push","shift","shouldRenderApp","instructionLayout","mainAppLayout","Fragment","components_TodayComponent_TodayComponent","components_ListComponent_ListComponent","components_GraphComponent_GraphComponent","components_Navbar_Navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.02f107eb.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './SearchBox.css';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst SearchBox = ({ searchSubmit }) => {\r\n\r\n    const [query, setQuery] = useState('');\r\n\r\n\r\n    const handleQueryStringChange = (e) => {\r\n        setQuery(e.target.value);\r\n    }\r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n        console.log('Fetch weather data for:', query);\r\n        searchSubmit(query);\r\n    }\r\n\r\n    return (\r\n        <div className=\"form-container\">\r\n            <form onSubmit={handleSearch}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={query}\r\n                    name=\"searchBox\"\r\n                    id=\"searchBox\"\r\n                    placeholder=\"Enter City or Zipcode\"\r\n                    onChange={handleQueryStringChange} />\r\n                <span\r\n                    className=\"search-button fa fa-search\"\r\n                    onClick={handleSearch}></span>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nSearchBox.propTypes = {\r\n    searchSubmit: PropTypes.func\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\nimport './UnitComponent.css';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst UnitComponent = ({ unit, onUnitChange }) => {\r\n\r\n    const changeUnit = (e) => {\r\n        const newUnit = e.target.textContent;\r\n        onUnitChange(newUnit);\r\n    }\r\n\r\n    return (\r\n        <div className=\"unit-container\">\r\n            <span className={`unit-value ${unit === 'C' ? 'active-unit' : ''}`} onClick={changeUnit}>C</span>\r\n            <span className={`unit-value ${unit === 'F' ? 'active-unit' : ''}`} onClick={changeUnit}>F</span>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nUnitComponent.propTypes = {\r\n    unit: PropTypes.string,\r\n    onUnitChange: PropTypes.func\r\n}\r\n\r\nexport default UnitComponent;","import React from 'react';\r\nimport './Navbar.css';\r\nimport SearchBox from '../SearchBox/SearchBox';\r\nimport UnitComponent from '../UnitComponent/UnitComponent';\r\n\r\nconst Navbar = (props) => {\r\n\r\n    const sendNewUnitToParent = (newUnit) => {\r\n        props.changeUnit(newUnit);\r\n    }\r\n\r\n    const sendQueryStringToParent = (query) => {\r\n        props.searchSubmit(query);\r\n    }\r\n\r\n    return (\r\n        <nav>\r\n            <ul className=\"navbar-container\">\r\n                <li className=\"navbar-list-item\">\r\n                    <SearchBox searchSubmit={sendQueryStringToParent} />\r\n                </li>\r\n                <li className=\"navbar-list-item city-name\">\r\n                    <span>{props.data.city}</span>\r\n                </li>\r\n                <li className=\"navbar-list-item\">\r\n                    <UnitComponent unit={props.unit} onUnitChange={sendNewUnitToParent} />\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\n\r\nexport default Navbar;","const blue = [300, 301, 302, 310, 311, 313, 314, 321, 500, 501, 502, 503, 504, 511, 520, 521, 522, 531, 611, 612, 615, 616, 620, 701]\r\nconst yellow = [210, 211, 212, 221, 731, 761, 762, 800]\r\nconst gray = [200, 201, 202, 230, 231, 232, 600, 601, 602, 621, 622, 711, 721, 741, 771, 781, 801, 802, 803, 804]\r\n\r\nconst CLASS_BLUE = 'wi-blue';\r\nconst CLASS_YELLOW = 'wi-yellow';\r\nconst CLASS_GRAY = 'wi-gray'\r\n\r\nexport const getIconClassName = (weatherId) => {\r\n    const hasWeatherId = (idArray, id) => (idArray.indexOf(id) > -1);\r\n    if (hasWeatherId(blue, weatherId)) return CLASS_BLUE;\r\n    else if (hasWeatherId(yellow, weatherId)) return CLASS_YELLOW;\r\n    else if (hasWeatherId(gray, weatherId)) return CLASS_GRAY;\r\n    else return CLASS_BLUE;\r\n}","import React from 'react';\r\nimport './TodayComponent.css';\r\nimport { getIconClassName } from '../../utils/utils';\r\n\r\nconst TodayComponent = (props) => {\r\n\r\n    const {\r\n        day, date,\r\n        weatherId, description,\r\n        mainTemperature, minTemperature, maxTemperature,\r\n        pressure, humidity, windSpeed } = props.data;\r\n\r\n    const { unit } = props;\r\n\r\n    const iconClass = getIconClassName(weatherId);\r\n    const windSpeedUnit = (unit === 'C') ? 'm/s' : 'miles/hr';\r\n\r\n    return (\r\n        <div className=\"today-component-container\">\r\n            <div className=\"date-container\">\r\n                <div>{day}</div>\r\n                <div>{date}</div>\r\n            </div>\r\n\r\n            <div className=\"icon-desc-container\">\r\n                <div className=\"icon-conatainer\">\r\n                    <i className={`wi wi-owm-${weatherId} weather-icon ${iconClass}`} ></i>\r\n                </div>\r\n                <div className=\"weather-desc\">{description}</div>\r\n            </div>\r\n\r\n            <div className=\"temp-container\">\r\n                <div className=\"temp-text\">\r\n                    <span>{mainTemperature}</span>\r\n                    <i className=\"wi wi-degrees\"></i>\r\n                </div>\r\n                <div className=\"high-low-container\">\r\n                    <div className=\"high-low-item\">\r\n                        <span>\r\n                            <i className=\"wi wi-direction-up\" ></i>\r\n                        </span>\r\n                        <span>Max</span>\r\n                        <span>\r\n                            <span>{maxTemperature}&#x00B0;</span>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"high-low-item\">\r\n                        <span>\r\n                            <i className=\"wi wi-direction-down\" ></i>\r\n                        </span>\r\n                        <span>Min</span>\r\n                        <span>\r\n                            <span>{minTemperature}&#x00B0;</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"extra-info-container\">\r\n                <div className=\"extra-info-item\">\r\n                    <span><i className=\"wi wi-humidity\"></i></span>\r\n                    <span>Humidity</span>\r\n                    <span>{humidity}%</span>\r\n                </div>\r\n                <div className=\"extra-info-item\">\r\n                    <span><i className=\"wi wi-barometer\"></i></span>\r\n                    <span>Pressure</span>\r\n                    <span>{pressure} hPa</span>\r\n                </div>\r\n                <div className=\"extra-info-item\">\r\n                    <span><i className=\"wi wi-strong-wind\"></i></span>\r\n                    <span>Wind Speed</span>\r\n                    <span>{windSpeed} {windSpeedUnit}</span>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    );\r\n}\r\n\r\nexport default TodayComponent;","import React from 'react';\r\nimport './ListComponent.css';\r\nimport { getIconClassName } from '../../utils/utils';\r\n\r\nconst SingleListItem = (props) => {\r\n    const { day, weatherId, description, mainTemperature } = props.data;\r\n    const iconClass = getIconClassName(weatherId);\r\n\r\n    return (\r\n        <div className=\"single-list-item\">\r\n            <div className=\"li-info-container\">\r\n                <div className=\"li-day\">\r\n                    {day}\r\n                </div>\r\n                <div className=\"li-temp-text\">{mainTemperature}&#x00B0;</div>\r\n                <div className=\"li-desc\">{description}</div>\r\n            </div>\r\n            <div className=\"li-weather-icon\">\r\n                <i className={`wi wi-owm-${weatherId} ${iconClass}`}></i>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst ListComponent = ({ data }) => {\r\n\r\n    const items = data.map(singleDayData =>\r\n        (\r\n            <SingleListItem key={singleDayData.day} data={singleDayData} />\r\n        )\r\n    )\r\n    \r\n    return (\r\n        <div className=\"list-container\">\r\n            {items}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListComponent;","import React from 'react';\r\nimport { Sparklines, SparklinesLine, SparklinesSpots } from 'react-sparklines';\r\nimport './GraphComponent.css';\r\n\r\nconst GraphComponent = ({ data }) => {\r\n    return (\r\n        <div className=\"graph-container\">\r\n            <div className=\"graph-info\">\r\n                <span><i className=\"fa fa-arrow-left\"></i></span>\r\n                <span>Temperature variation over 7 days</span>\r\n                <span><i className=\"fa fa-arrow-right\"></i></span>\r\n            </div>\r\n            <div className=\"graph\">\r\n                <Sparklines data={data}>\r\n                    <SparklinesLine color=\"#fe1743\" />\r\n                    <SparklinesSpots style={{ fill: \"#ffffff\" }} />\r\n                </Sparklines>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GraphComponent;","import React, { useState, useEffect } from 'react';\r\nimport Navbar from './components/Navbar/Navbar';\r\nimport TodayComponent from './components/TodayComponent/TodayComponent';\r\nimport ListComponent from './components/ListComponent/ListComponent';\r\nimport GraphComponent from './components/GraphComponent/GraphComponent';\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n    const [unit, setUnit] = useState('F');\r\n    const [queryString, setQueryString] = useState('');\r\n    const [latLng, setLatLng] = useState([]);\r\n    const [navbarData, setNavbarData] = useState({});\r\n    const [todayComponentData, setTodayComponentData] = useState({});\r\n    const [listComponentData, setListComponentData] = useState([]);\r\n    const [graphComponentData, setGraphComponentData] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const geolocation = navigator.geolocation;\r\n        if (geolocation) {\r\n            geolocation.getCurrentPosition((position) => {\r\n                setLatLng([position.coords.latitude, position.coords.longitude]);\r\n            }, () => {\r\n                console.log('Permission Denied');\r\n            });\r\n        } else {\r\n            console.log('GeoLocation not supported...Update the browser fella');\r\n        }\r\n    }, []);\r\n\r\n    const onUnitChange = (newUnit) => {\r\n        setUnit(newUnit);\r\n    }\r\n\r\n    const onSearchSubmit = (query) => {\r\n        setQueryString(query);\r\n        setLatLng([]);\r\n    }\r\n\r\n    useEffect(() => {\r\n        const hasLatLng = latLng.length > 0;\r\n        const hasCityOrZipcode = (queryString !== '');\r\n\r\n        if (hasLatLng || hasCityOrZipcode) {\r\n            fetchWeatherForecast(hasLatLng).then(forecastData => {\r\n                // console.log('Forecast Data:', forecastData);\r\n                // Extract component specific data...\r\n                const navbarData = extractDataForNavbar(forecastData);\r\n                const todayComponentData = extractDataForTodayComponent(forecastData);\r\n                const { listComponentData, graphComponentData } = extractDataForListAndGraphComponent(forecastData);\r\n\r\n                setNavbarData(navbarData);\r\n                setTodayComponentData(todayComponentData);\r\n                setListComponentData(listComponentData);\r\n                setGraphComponentData(graphComponentData);\r\n\r\n            }).catch(error => {\r\n                console.log('Error:', error);\r\n            });\r\n        }\r\n    }, [latLng.length, queryString, unit]\r\n    )\r\n\r\n    const fetchWeatherForecast = async (hasLatLng) => {\r\n        const queryParams = (hasLatLng) ? `lat=${latLng[0]}&lon=${latLng[1]}` : `q=${queryString},us`;\r\n        const unitType = (unit === 'C') ? 'metric' : 'imperial';\r\n        const url = `${process.env.REACT_APP_BASE_URL}?${queryParams}&units=${unitType}&cnt=7&appid=${process.env.REACT_APP_API_KEY}`;\r\n\r\n        const result = await axios.get(url);\r\n\r\n        return result.data;\r\n    }\r\n\r\n    const extractDataForNavbar = (forecastData) => {\r\n        return {\r\n            city: `${forecastData.city.name}, ${forecastData.city.country}`\r\n        };\r\n    }\r\n\r\n    const extractDataForTodayComponent = (forecastData) => {\r\n        const monthNames = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\r\n\r\n        const todayForecast = forecastData.list[0];\r\n\r\n        const time = new Date(todayForecast.dt * 1000);\r\n        const day = getDay(time);\r\n        const date = `${monthNames[time.getMonth()]} ${time.getDate()}, ${time.getFullYear()}`\r\n\r\n        const weatherId = todayForecast.weather[0].id;\r\n        const description = todayForecast.weather[0].description;\r\n\r\n        const hours = new Date().getHours();\r\n        const isDayTime = hours > 6 && hours < 20;\r\n        let mainTemperature = (isDayTime) ? todayForecast.temp.day : todayForecast.temp.night;\r\n        mainTemperature = Math.round(mainTemperature);\r\n        const minTemperature = Math.round(todayForecast.temp.min);\r\n        const maxTemperature = Math.round(todayForecast.temp.max);\r\n\r\n        const pressure = todayForecast.pressure;\r\n        const humidity = todayForecast.humidity;\r\n        const windSpeed = todayForecast.speed;\r\n\r\n        return {\r\n            day,\r\n            date,\r\n            weatherId,\r\n            description,\r\n            mainTemperature,\r\n            minTemperature,\r\n            maxTemperature,\r\n            pressure,\r\n            humidity,\r\n            windSpeed\r\n        }\r\n    }\r\n\r\n    const extractDataForListAndGraphComponent = (forecastData) => {\r\n        const listComponentData = [];\r\n        const graphComponentData = [];\r\n\r\n        forecastData.list.forEach(forecast => {\r\n            let item = {};\r\n            item.day = getDay(forecast.dt * 1000);\r\n            item.weatherId = forecast.weather[0].id;\r\n            item.description = forecast.weather[0].description;\r\n            item.mainTemperature = Math.round(forecast.temp.day);\r\n\r\n            listComponentData.push(item);\r\n            graphComponentData.push(forecast.temp.day)\r\n        });\r\n\r\n        // Remove first element as that represents today's weather\r\n        listComponentData.shift();\r\n\r\n        return {\r\n            listComponentData,\r\n            graphComponentData\r\n        }\r\n    }\r\n\r\n    // Takes date object or unix timestamp in ms and returns day string\r\n    const getDay = (time) => {\r\n        const dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday \", \"Friday\", \"Saturday\"];\r\n        return dayNames[(new Date(time).getDay())];\r\n    }\r\n\r\n    const hasLatLng = latLng.length > 0;\r\n    const hasCityOrZipcode = (queryString !== '');\r\n    const shouldRenderApp = hasLatLng || hasCityOrZipcode;\r\n\r\n    const instructionLayout = <div className=\"app-instruction\">\r\n        <p>Allow Location Access or type city name/zip code in search area to get started.</p>\r\n    </div>\r\n\r\n    const mainAppLayout = <React.Fragment>\r\n        <div className=\"app-today\">\r\n            <TodayComponent data={todayComponentData} unit={unit} />\r\n        </div>\r\n        <div className=\"app-list-graph\">\r\n            <ListComponent data={listComponentData} />\r\n            <GraphComponent data={graphComponentData} />\r\n        </div>\r\n    </React.Fragment>\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <div className=\"app-nav\">\r\n                <Navbar\r\n                    searchSubmit={onSearchSubmit}\r\n                    changeUnit={onUnitChange}\r\n                    unit={unit}\r\n                    data={navbarData}\r\n                />\r\n            </div>\r\n            {shouldRenderApp ? mainAppLayout : instructionLayout}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}